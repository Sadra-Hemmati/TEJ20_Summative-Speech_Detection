#include <LiquidCrystal_I2C.h>

LiquidCrystal_I2C lcd(0x27, 16, 2);

bool speechControl = false;

//The current command generated by the classifer (left, right, stop or other)
String command = "other";

#define BTN_PIN 9
#define DC_ENABLE 11
#define DC_LEFT 8
#define DC_RIGHT 10

bool lastBtnState;

void setup() {
    lcd.init();
    lcd.backlight();
    lcd.clear();
    lcd.setCursor(0, 0);

    pinMode(BTN_PIN, INPUT_PULLUP);
    pinMode(DC_ENABLE, OUTPUT);
    pinMode(DC_LEFT, OUTPUT);
    pinMode(DC_RIGHT, OUTPUT);

    lastBtnState = !digitalRead(BTN_PIN);
    Serial.begin(9600);
}

void loop() {
    bool btnState = !digitalRead(BTN_PIN);

    if (btnState && !lastBtnState){
        speechControl = !speechControl;
    }
    lastBtnState = btnState;

    Serial.println(String(speechControl) + String(btnState));

    //only continue if voice control is on, ensure the motor is turned off
    if (!speechControl){
        digitalWrite(DC_ENABLE, LOW);
        digitalWrite(DC_RIGHT, LOW);
        digitalWrite(DC_LEFT, LOW);
        lcd.clear();
        lcd.setCursor(0, 0);
        lcd.print("Voice Ctrl Off");
        // command = "stop";
        return;
    }

    if (command == "left") {
        analogWrite(DC_ENABLE, 200);
        digitalWrite(DC_LEFT, HIGH);
        digitalWrite(DC_RIGHT, LOW);
        lcd.clear();
        lcd.setCursor(0, 0);
        lcd.print("Turning Left");

    }
    if (command == "right") {
        analogWrite(DC_ENABLE, 200);
        digitalWrite(DC_RIGHT, HIGH);
        digitalWrite(DC_LEFT, LOW);
        lcd.clear();
        lcd.setCursor(0, 0);
        lcd.print("Turning Right");
    }
    if (command == "stop") {
        digitalWrite(DC_ENABLE, LOW);
        digitalWrite(DC_RIGHT, LOW);
        digitalWrite(DC_LEFT, LOW);
        lcd.clear();
        lcd.setCursor(0, 0);
        lcd.print("Voice Ctrl On");
    }
}
